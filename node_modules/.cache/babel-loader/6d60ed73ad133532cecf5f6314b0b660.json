{"ast":null,"code":"var _jsxFileName = \"/Users/glenn/Desktop/2020/info30005/info30005-pear-frontend/src/pages/Chat.js\";\n// Import necessary libraries\n\n/* Chat page hosts a conversation between 2 participants and keeps track fo messages sent\n */\nimport React, { useState, useEffect } from \"react\";\nimport Messages from \"../components/chat/Messages\";\nimport \"../css/chatStyles.css\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport { addMessage, getMessages, useMessages, useOneAccount, useReadOneConversation, useReadParticipants, addParticipantsInConversation, removeParticipantsInConversation } from \"../api.js\";\nexport default function Chat(data) {\n  /* Loads conversation and messages, specified by stored conversationId\n   */\n  var {\n    loading,\n    messages,\n    error\n  } = useMessages({\n    conversationId: sessionStorage.getItem(\"conversationId\")\n  });\n  console.log(messages);\n  var {\n    loading,\n    conversations,\n    error\n  } = useReadOneConversation({\n    conversationId: sessionStorage.getItem(\"conversationId\")\n  });\n  console.log(conversations);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, \"Something went wrong: \", error.message);\n  }\n  /* Called when a participant enters the chat room and registers that they have joined the chat,\n  ensures that the chat room is inaccesible from the homepage when there are 2 participants (max participants)\n  */\n\n\n  addParticipantsInConversation({\n    conversationId: sessionStorage.getItem(\"conversationId\"),\n    participantsId: sessionStorage.getItem(\"accountId\")\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, [conversations].map(conversations => /*#__PURE__*/React.createElement(Partner, Object.assign({\n    key: conversations._id\n  }, conversations, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-item message-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, messages.map(messages => /*#__PURE__*/React.createElement(Message, Object.assign({\n    key: messages._id\n  }, messages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-item topic-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: conversations.topicImage,\n    width: \"250\",\n    height: \"250\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), \"Talking about: \", conversations.topic), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-item message-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MessageForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }))));\n}\n{\n  /*Form used to handle message submissions*/\n}\n\nfunction MessageForm() {\n  const conversationId = sessionStorage.getItem(\"conversationId\");\n  const senderId = sessionStorage.getItem(\"accountId\");\n  const [text, setText] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [video, setVideo] = useState(\"\"); //on submit, add message to mongoDB database\n\n  function onSubmit() {\n    addMessage({\n      conversationId,\n      senderId,\n      text\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Write message: \"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"message\",\n    placeholder: \"Type your message\",\n    value: text,\n    onChange: event => {\n      setText(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Send\",\n    id: \"send-btn\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }))));\n}\n/* This function is created to display all messages from a specific conversation stored in the mongoDb\n   database. \n*/\n\n\nfunction Message(message) {\n  var intervalID;\n  const history = useHistory();\n  const {\n    _id,\n    conversationId,\n    senderId,\n    text,\n    image,\n    video,\n    timeSent\n  } = message; //gets account based on the senderId\n\n  var account = useOneAccount({\n    accountId: senderId\n  }).accounts; //if the report button is clicked, the message id and user id of the sender gets recorded.\n  //The user is then directed to another page to make a report\n\n  function onSubmit() {\n    sessionStorage.setItem(\"reportUserId\", senderId);\n    sessionStorage.setItem(\"reportMessageId\", _id);\n    history.push(\"/report\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"join\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chat-room conversation-${text}`,\n    key: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }), account.firstName, \":\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 31\n    }\n  }), text, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Report\",\n    id: \"chatReport-btn\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }))));\n}\n\nfunction Partner(data) {\n  //default values in the case that there is no other participant in the chat\n  var userImage = `https://res.cloudinary.com/drvfo389c/image/upload/v1589694061/pear/profile_hdtz1k.png`;\n  var firstName = \"Waiting on Partipant\"; //determines chat partner\n\n  for (var i = 0; i < data.participantsId.length; i++) {\n    if (data.participantsId[i] != sessionStorage.getItem(\"accountId\") && data.participantsId[i] != null) {\n      var participant = data.participantsId[i];\n    }\n  } //updates default values to use chat partner values if one is available\n\n\n  var account = useReadParticipants({\n    accountId: participant\n  }).accounts;\n  console.log(account);\n\n  if (account.userImage != undefined) {\n    userImage = account.userImage;\n  }\n\n  if (account.firstName != undefined) {\n    firstName = account.firstName;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-item user-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: userImage,\n    width: \"250\",\n    height: \"250\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), console.log(firstName), console.log(userImage), \"Talking to: \", firstName);\n}","map":{"version":3,"sources":["/Users/glenn/Desktop/2020/info30005/info30005-pear-frontend/src/pages/Chat.js"],"names":["React","useState","useEffect","Messages","NavLink","useHistory","addMessage","getMessages","useMessages","useOneAccount","useReadOneConversation","useReadParticipants","addParticipantsInConversation","removeParticipantsInConversation","Chat","data","loading","messages","error","conversationId","sessionStorage","getItem","console","log","conversations","message","participantsId","map","_id","topicImage","topic","MessageForm","senderId","text","setText","image","setImage","video","setVideo","onSubmit","handleSubmit","event","preventDefault","target","value","Message","intervalID","history","timeSent","account","accountId","accounts","setItem","push","firstName","Partner","userImage","i","length","participant","undefined"],"mappings":"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","sourcesContent":["// Import necessary libraries\n\n/* Chat page hosts a conversation between 2 participants and keeps track fo messages sent\n */\nimport React, { useState, useEffect } from \"react\";\nimport Messages from \"../components/chat/Messages\";\nimport \"../css/chatStyles.css\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport {\n  addMessage,\n  getMessages,\n  useMessages,\n  useOneAccount,\n  useReadOneConversation,\n  useReadParticipants,\n  addParticipantsInConversation,\n  removeParticipantsInConversation,\n} from \"../api.js\";\n\nexport default function Chat(data) {\n  /* Loads conversation and messages, specified by stored conversationId\n   */\n  var { loading, messages, error } = useMessages({\n    conversationId: sessionStorage.getItem(\"conversationId\"),\n  });\n  console.log(messages);\n  var { loading, conversations, error } = useReadOneConversation({\n    conversationId: sessionStorage.getItem(\"conversationId\"),\n  });\n  console.log(conversations);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n  if (error) {\n    return <p>Something went wrong: {error.message}</p>;\n  }\n\n  /* Called when a participant enters the chat room and registers that they have joined the chat,\n  ensures that the chat room is inaccesible from the homepage when there are 2 participants (max participants)\n*/\n  addParticipantsInConversation({\n    conversationId: sessionStorage.getItem(\"conversationId\"),\n    participantsId: sessionStorage.getItem(\"accountId\"),\n  });\n\n  return (\n    <div>\n      <div className=\"message-heading\"></div>\n      <div className=\"chat-page\">\n        {/*Determines the chat partner in a conversation*/}\n        {[conversations].map((conversations) => (\n          <Partner key={conversations._id} {...conversations} />\n        ))}\n\n        <div className=\"grid-item message-display\">\n          {/*Spreads messages and displays them in the chat window*/}\n          {messages.map((messages) => (\n            <Message key={messages._id} {...messages} />\n          ))}\n        </div>\n\n        {/*Displayst the topic image and name of the topic*/}\n        <div className=\"grid-item topic-display\">\n          <img src={conversations.topicImage} width=\"250\" height=\"250\"></img>\n          Talking about: {conversations.topic}\n        </div>\n\n        <div className=\"grid-item message-form\">\n          <MessageForm />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n{\n  /*Form used to handle message submissions*/\n}\nfunction MessageForm() {\n  const conversationId = sessionStorage.getItem(\"conversationId\");\n  const senderId = sessionStorage.getItem(\"accountId\");\n  const [text, setText] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [video, setVideo] = useState(\"\");\n\n  //on submit, add message to mongoDB database\n  function onSubmit() {\n    addMessage({\n      conversationId,\n      senderId,\n      text,\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  return (\n    <div className=\"chatBox\">\n      <h1>Write message: </h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"message\"\n          placeholder=\"Type your message\"\n          value={text}\n          onChange={(event) => {\n            setText(event.target.value);\n          }}\n        />{\" \"}\n        <br />\n        <div className=\"send\">\n          <input type=\"submit\" value=\"Send\" id=\"send-btn\" onClick={onSubmit} />\n        </div>\n      </form>\n    </div>\n  );\n}\n\n/* This function is created to display all messages from a specific conversation stored in the mongoDb\n   database. \n*/\nfunction Message(message) {\n  var intervalID;\n  const history = useHistory();\n  const {\n    _id,\n    conversationId,\n    senderId,\n    text,\n    image,\n    video,\n    timeSent,\n  } = message;\n  //gets account based on the senderId\n  var account = useOneAccount({ accountId: senderId }).accounts;\n\n  //if the report button is clicked, the message id and user id of the sender gets recorded.\n  //The user is then directed to another page to make a report\n  function onSubmit() {\n    sessionStorage.setItem(\"reportUserId\", senderId);\n    sessionStorage.setItem(\"reportMessageId\", _id);\n    history.push(\"/report\");\n  }\n\n  return (\n    <section className=\"join\">\n      <div className={`chat-room conversation-${text}`} key={text}>\n        <div>\n          <br></br>\n          {account.firstName}:<br></br>\n          {text}\n          <input\n            type=\"submit\"\n            value=\"Report\"\n            id=\"chatReport-btn\"\n            onClick={onSubmit}\n          />\n        </div>\n      </div>\n    </section>\n  );\n}\n\nfunction Partner(data) {\n  //default values in the case that there is no other participant in the chat\n  var userImage = `https://res.cloudinary.com/drvfo389c/image/upload/v1589694061/pear/profile_hdtz1k.png`;\n  var firstName = \"Waiting on Partipant\";\n\n  //determines chat partner\n  for (var i = 0; i < data.participantsId.length; i++) {\n    if (\n      data.participantsId[i] != sessionStorage.getItem(\"accountId\") &&\n      data.participantsId[i] != null\n    ) {\n      var participant = data.participantsId[i];\n    }\n  }\n\n  //updates default values to use chat partner values if one is available\n  var account = useReadParticipants({ accountId: participant }).accounts;\n  console.log(account);\n  if (account.userImage != undefined) {\n    userImage = account.userImage;\n  }\n  if (account.firstName != undefined) {\n    firstName = account.firstName;\n  }\n  return (\n    <div className=\"grid-item user-display\">\n      {/*displays partner information*/}\n      <img src={userImage} width=\"250\" height=\"250\"></img>\n      {console.log(firstName)}\n      {console.log(userImage)}\n      Talking to: {firstName}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}