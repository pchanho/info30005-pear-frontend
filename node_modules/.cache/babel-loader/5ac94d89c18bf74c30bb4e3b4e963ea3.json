{"ast":null,"code":"/*TODO*/\nimport { useState, useEffect } from \"react\";\nconst BASE_URL = \"https://info30005-pear.herokuapp.cm\";\n/*----------------\r\n Conversation API\r\n----------------*/\n\nfunction getConversations() {\n  const endpoint = BASE_URL + '/conversation/readAll';\n  console.log(\"getConversations\");\n  return fetch(endpoint).then(res => res.json());\n} // export function getConversation(id) {\n//     const endpoint = BASE_URL + `/conversation/readOne/${id}`;\n//     console.log(\"getConversation\");\n//     return fetch(endpoint).then(res => {\n//         console.log(res);\n//     });\n// }\n\n\nexport function useConversations() {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getConversations().then(conversations => {\n      setConversations(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    conversations,\n    error\n  };\n}\nexport function addConversation(conversation) {\n  const {\n    topic,\n    category,\n    participantsId\n  } = conversation;\n\n  if (!topic || !category) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  console.log({\n    topic,\n    category\n  });\n  const endpoint = BASE_URL + `/conversation/create/`;\n  console.log(\"addConversation\"); // console.log(author);\n\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      topic,\n      category,\n      participantsId\n    })\n  }).then(res => window.location.reload());\n}\n/*----------------\r\n Account API\r\n----------------*/\n\n/*----------------\r\n Message API\r\n----------------*/\n\nfunction getMessages() {\n  const endpoint = BASE_URL + '/message/readAll';\n  console.log(\"getMessages\");\n  return fetch(endpoint).then(res => res.json());\n} // export function getConversation(id) {\n//     const endpoint = BASE_URL + `/conversation/readOne/${id}`;\n//     console.log(\"getConversation\");\n//     return fetch(endpoint).then(res => {\n//         console.log(res);\n//     });\n// }\n\n\nexport function useMessages() {\n  const [loading, setLoading] = useState(true);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getMessages().then(messages => {\n      setMessages(messages);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    messages,\n    error\n  };\n}","map":{"version":3,"sources":["A:/Github/info30005-pear-frontend/src/api.js"],"names":["useState","useEffect","BASE_URL","getConversations","endpoint","console","log","fetch","then","res","json","useConversations","loading","setLoading","conversations","setConversations","error","setError","catch","e","addConversation","conversation","topic","category","participantsId","alert","method","headers","body","JSON","stringify","window","location","reload","getMessages","useMessages","messages","setMessages"],"mappings":"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","sourcesContent":["/*TODO*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst BASE_URL = \"https://info30005-pear.herokuapp.cm\";\r\n\r\n/*----------------\r\n Conversation API\r\n----------------*/\r\nfunction getConversations() {\r\n    const endpoint = BASE_URL + '/conversation/readAll';\r\n    console.log(\"getConversations\");\r\n    return fetch(endpoint).then(res => res.json());\r\n}\r\n\r\n// export function getConversation(id) {\r\n//     const endpoint = BASE_URL + `/conversation/readOne/${id}`;\r\n//     console.log(\"getConversation\");\r\n//     return fetch(endpoint).then(res => {\r\n//         console.log(res);\r\n//     });\r\n// }\r\n\r\nexport function useConversations() {\r\n    const [loading, setLoading] = useState(true);\r\n    const [conversations, setConversations] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getConversations()\r\n            .then(conversations => {\r\n                setConversations(conversations);\r\n                setLoading(false);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                setError(e);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    return {\r\n        loading,\r\n        conversations,\r\n        error\r\n    };\r\n}\r\n\r\n\r\nexport function addConversation(conversation) {\r\n    const { topic, category, participantsId } = conversation;\r\n    if (!topic || !category) {\r\n        alert(\"must include all fields\");\r\n        return;\r\n    }\r\n\r\n    console.log({\r\n        topic,\r\n        category\r\n    });\r\n\r\n    const endpoint = BASE_URL + `/conversation/create/`;\r\n    console.log(\"addConversation\");\r\n    // console.log(author);\r\n    return fetch(endpoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            topic,\r\n            category,\r\n            participantsId\r\n        })\r\n    }).then(res => window.location.reload());\r\n}\r\n\r\n/*----------------\r\n Account API\r\n----------------*/\r\n\r\n\r\n\r\n/*----------------\r\n Message API\r\n----------------*/\r\nfunction getMessages() {\r\n    const endpoint = BASE_URL + '/message/readAll';\r\n    console.log(\"getMessages\");\r\n    return fetch(endpoint).then(res => res.json());\r\n}\r\n\r\n// export function getConversation(id) {\r\n//     const endpoint = BASE_URL + `/conversation/readOne/${id}`;\r\n//     console.log(\"getConversation\");\r\n//     return fetch(endpoint).then(res => {\r\n//         console.log(res);\r\n//     });\r\n// }\r\n\r\nexport function useMessages() {\r\n    const [loading, setLoading] = useState(true);\r\n    const [messages, setMessages] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getMessages()\r\n            .then(messages => {\r\n                setMessages(messages);\r\n                setLoading(false);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                setError(e);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    return {\r\n        loading,\r\n        messages,\r\n        error\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}