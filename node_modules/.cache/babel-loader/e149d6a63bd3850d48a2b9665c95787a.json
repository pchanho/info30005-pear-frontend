{"ast":null,"code":"/*TODO\n *  1. Login feature\n *  2. */\nimport { useState, useEffect } from \"react\";\nimport FormData from \"form-data\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\"; //Temporary base url before update heroku server\n// const BASE_URL = \"http://localhost:3001\";\n\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n/*----------------\n Conversation API\n----------------*/\n\n/* add message to the database\n */\n\n/* retrieve conversation from backend\n */\n\nfunction getConversations() {\n  const endpoint = BASE_URL + \"/conversation/readAll\";\n  return fetch(endpoint).then(res => res.json());\n}\n/* retrieve conversation from the backend that are not full\n */\n\n\nfunction getNewConversations() {\n  const endpoint = BASE_URL + \"/conversation/readNew\";\n  return fetch(endpoint).then(res => res.json());\n}\n/* retrieve conversation from backend based on id\n */\n\n\nasync function readOneConversation(data) {\n  const endpoint = BASE_URL + \"/conversation/readOne\";\n  const conversationId = data.conversationId;\n  console.log(conversationId);\n\n  if (!conversationId) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  var res = fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      conversationId\n    })\n  }).then(res => res.json());\n  return res;\n}\n/*wrapper for read one conversation\n */\n\n\nexport function useReadOneConversation(data) {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    readOneConversation(data).then(conversations => {\n      setConversations(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    conversations,\n    error\n  };\n}\n/* wrapper for get conversations\n */\n\nexport function useConversations() {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getNewConversations().then(conversations => {\n      setConversations(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    conversations,\n    error\n  };\n}\n/* add conversation to the database\n */\n\nexport async function addConversation(conversation) {\n  const {\n    topic,\n    category,\n    image\n  } = conversation;\n\n  if (!topic || !category) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  if (image == undefined) {\n    alert(\"no image detected, default image used in place\");\n  }\n\n  const data = new FormData();\n  data.append(\"topicImage\", image);\n  data.append(\"topic\", topic);\n  data.append(\"category\", category);\n  const endpoint = BASE_URL + `/conversation/create/`;\n  console.log(\"addConversation\");\n  var res = axios({\n    method: \"post\",\n    url: endpoint,\n    data: data,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(res.data._id);\n    sessionStorage.setItem(\"conversationId\", res.data._id);\n  });\n  console.log(res);\n  return res;\n} //records participants who enter a chat\n\nexport async function addParticipantsInConversation(data) {\n  const {\n    conversationId,\n    participantsId\n  } = data;\n\n  if (!conversationId || !participantsId) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  const formData = new FormData();\n  formData.append(\"conversationId\", conversationId);\n  formData.append(\"participantsId\", participantsId);\n  console.log(formData);\n  const endpoint = BASE_URL + `/conversation/addParticipants/`;\n  var res = axios({\n    method: \"put\",\n    url: endpoint,\n    data: formData,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(res.data);\n  });\n  console.log(res);\n  return res;\n} //records participants who leave a chat\n\nexport async function removeParticipantsInConversation(data) {\n  const {\n    conversationId,\n    participantsId\n  } = data;\n\n  if (!conversationId || !participantsId) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  alert(\"You have now left this conversation!\");\n  const formData = new FormData();\n  formData.append(\"conversationId\", conversationId);\n  formData.append(\"participantsId\", participantsId);\n  console.log(formData);\n  const endpoint = BASE_URL + `/conversation/removeParticipants/`;\n  var res = axios({\n    method: \"put\",\n    url: endpoint,\n    data: formData,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    console.log(res.data);\n  });\n  console.log(res);\n  return res;\n}\n/*----------------\n Account API\n----------------*/\n\n/* reads a user account from the database based on id\n */\n\nexport async function readOneAccount(data) {\n  const accountId = data.accountId;\n  const endpoint = BASE_URL + \"/account/readOne\";\n  var res = await axios({\n    method: \"post\",\n    url: endpoint,\n    data: {\n      accountId\n    }\n  });\n  return res.data;\n}\n/* wrapper for reading participants*/\n\nexport function useReadParticipants(data) {\n  const [loading, setLoading] = useState(true);\n  const [accounts, setAccounts] = useState([]);\n  const [error, setError] = useState(null);\n  console.log(\"ACALLED\");\n  useEffect(() => {\n    readOneAccount(data).then(accounts => {\n      setAccounts(accounts);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    accounts,\n    error\n  };\n}\n/* wrapper for reading one account*/\n\nexport function useOneAccount(data) {\n  const [loading, setLoading] = useState(true);\n  const [accounts, setAccounts] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    readOneAccount(data).then(accounts => {\n      setAccounts(accounts);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    accounts,\n    error\n  };\n}\n/* function adds an account to the database with the specified key value pairs \n    inputted by the user \n*/\n\nexport function addAccount(account) {\n  const {\n    firstName,\n    lastName,\n    email,\n    birthday,\n    password,\n    userImage\n  } = account; //alerts the user if one of the input fields is blank\n\n  if (!firstName || !lastName || !email || !birthday || !password) {\n    alert(\"must include all fields\");\n    return null;\n  } //accesses the create function from backend\n\n\n  const endpoint = BASE_URL + `/account/create/`;\n  const data = new FormData();\n  data.append(\"firstName\", firstName);\n  data.append(\"lastName\", lastName);\n  data.append(\"email\", email);\n  data.append(\"birthday\", birthday);\n  data.append(\"password\", password);\n  data.append(\"userImage\", userImage);\n\n  if (userImage == undefined) {\n    alert(\"no image detected, default image used in place\");\n  } //returns the status of the login (accountId, false)\n\n\n  return fetch(endpoint, {\n    method: \"POST\",\n    body: data\n  }).then(res => {\n    window.location.reload();\n    alert(\"account succesfully created! You can now log in!\");\n  });\n}\n/* function compares if login credentials match those stored in the \n    database, if succesful, the accountId is returned\n*/\n\nexport async function accountLogin(login) {\n  const {\n    email,\n    password\n  } = login; //alerts the user if one of the input fields is blank\n\n  if (!email || !password) {\n    alert(\"must include all fields\");\n    return null;\n  }\n\n  console.log({\n    email,\n    password\n  }); //accesses the login function from backend\n\n  const endpoint = BASE_URL + `/account/login/`;\n  console.log(\"login\"); //returns the status of the login (true, false)\n\n  return new Promise(function (resolve) {\n    axios({\n      method: \"post\",\n      url: endpoint,\n      data: {\n        email,\n        password\n      }\n    }).then(function (json) {\n      resolve(json);\n    });\n  });\n}\n/*----------------\n Message API\n----------------*/\n\n/* add message to the database\n */\n\nexport function addMessage(message) {\n  const {\n    conversationId,\n    senderId,\n    text,\n    image,\n    video\n  } = message;\n\n  if (!conversationId || !senderId || !text) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  console.log(\"made it\");\n  const endpoint = BASE_URL + `/message/create/`;\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      conversationId,\n      senderId,\n      text,\n      image,\n      video\n    })\n  }).then(res => window.location.reload());\n}\n/* gets messages based on conversation id\n */\n\nfunction getSpecific(data) {\n  const endpoint = BASE_URL + \"/message/readSpecific\";\n  const conversationId = data.conversationId;\n\n  if (!conversationId) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  var res = fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      conversationId\n    })\n  }).then(res => res.json());\n  return res;\n}\n/* gets all messages from database\n */\n\n\nfunction getMessages() {\n  const endpoint = BASE_URL + \"/message/readAll\";\n  console.log(\"getMessages\");\n  return fetch(endpoint).then(res => res.json());\n}\n/* wrapper for get messages\n */\n\n\nexport function useMessages(data) {\n  const [loading, setLoading] = useState(true);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getSpecific(data).then(messages => {\n      setMessages(messages);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    messages,\n    error\n  };\n}\n/*----------------\n Report API\n----------------*/\n\n/* add report to the database\n */\n\nexport function addReport(report) {\n  const {\n    accountId,\n    messageId,\n    reason\n  } = report;\n\n  if (!accountId || !messageId || !reason) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  const data = new FormData();\n  data.append(\"accountId\", accountId);\n  data.append(\"messageId\", messageId);\n  data.append(\"reason\", reason);\n  const endpoint = BASE_URL + `/report/create/`;\n  var res = axios({\n    method: \"post\",\n    url: endpoint,\n    data: data,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(res => {\n    alert(\"report succesfully submitted!\");\n    console.log(res.data._id);\n  });\n  console.log(res);\n  return res;\n} //allows the admin to log in and view reports\n\nexport function reportLogin(reportLogin) {\n  const {\n    password\n  } = reportLogin;\n\n  if (!password) {\n    alert(\"must include field\");\n    return null;\n  }\n\n  var storedPassword = \"info30005\";\n\n  if (password === storedPassword) {\n    console.log(process.env.ADMIN);\n    return \"True\";\n  } else {\n    return \"False\";\n  }\n}\n/* gets all messages from reports\n */\n\nfunction getReports() {\n  const endpoint = BASE_URL + \"/report/readAll\";\n  return fetch(endpoint).then(res => res.json());\n}\n/* wrapper for get reports\n */\n\n\nexport function useReports() {\n  const [loading, setLoading] = useState(true);\n  const [reports, setReports] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getReports().then(reports => {\n      setReports(reports);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    reports,\n    error\n  };\n}\n/*----------------\n Support API\n----------------*/\n\n/* add report to the database\n */\n\nfunction getSupports() {\n  const endpoint = BASE_URL + \"/support/readAll\";\n  console.log(getSupports);\n  return fetch(endpoint).then(res => res.json());\n}\n/* wrapper for get supports\n */\n\n\nexport function useSupports() {\n  const [loading, setLoading] = useState(true);\n  const [supports, setSupports] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getSupports().then(conversations => {\n      setSupports(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    supports,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/glenn/Desktop/2020/info30005/info30005-pear-frontend/src/api.js"],"names":["useState","useEffect","FormData","axios","useHistory","BASE_URL","getConversations","endpoint","fetch","then","res","json","getNewConversations","readOneConversation","data","conversationId","console","log","alert","method","headers","body","JSON","stringify","useReadOneConversation","loading","setLoading","conversations","setConversations","error","setError","catch","e","useConversations","addConversation","conversation","topic","category","image","undefined","append","url","_id","sessionStorage","setItem","addParticipantsInConversation","participantsId","formData","removeParticipantsInConversation","readOneAccount","accountId","useReadParticipants","accounts","setAccounts","useOneAccount","addAccount","account","firstName","lastName","email","birthday","password","userImage","window","location","reload","accountLogin","login","Promise","resolve","addMessage","message","senderId","text","video","getSpecific","getMessages","useMessages","messages","setMessages","addReport","report","messageId","reason","reportLogin","storedPassword","process","env","ADMIN","getReports","useReports","reports","setReports","getSupports","useSupports","supports","setSupports"],"mappings":"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","sourcesContent":["/*TODO\n *  1. Login feature\n *  2. */\n\nimport { useState, useEffect } from \"react\";\nimport FormData from \"form-data\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\n//Temporary base url before update heroku server\n// const BASE_URL = \"http://localhost:3001\";\n\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n\n/*----------------\n Conversation API\n----------------*/\n\n/* add message to the database\n */\n\n/* retrieve conversation from backend\n */\nfunction getConversations() {\n  const endpoint = BASE_URL + \"/conversation/readAll\";\n  return fetch(endpoint).then((res) => res.json());\n}\n\n/* retrieve conversation from the backend that are not full\n */\nfunction getNewConversations() {\n  const endpoint = BASE_URL + \"/conversation/readNew\";\n  return fetch(endpoint).then((res) => res.json());\n}\n\n/* retrieve conversation from backend based on id\n */\nasync function readOneConversation(data) {\n  const endpoint = BASE_URL + \"/conversation/readOne\";\n  const conversationId = data.conversationId;\n  console.log(conversationId);\n  if (!conversationId) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  var res = fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      conversationId,\n    }),\n  }).then((res) => res.json());\n\n  return res;\n}\n\n/*wrapper for read one conversation\n */\nexport function useReadOneConversation(data) {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    readOneConversation(data)\n      .then((conversations) => {\n        setConversations(conversations);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    conversations,\n    error,\n  };\n}\n\n/* wrapper for get conversations\n */\nexport function useConversations() {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getNewConversations()\n      .then((conversations) => {\n        setConversations(conversations);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    conversations,\n    error,\n  };\n}\n\n/* add conversation to the database\n */\nexport async function addConversation(conversation) {\n  const { topic, category, image } = conversation;\n  if (!topic || !category) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  if (image == undefined) {\n    alert(\"no image detected, default image used in place\");\n  }\n\n  const data = new FormData();\n  data.append(\"topicImage\", image);\n  data.append(\"topic\", topic);\n  data.append(\"category\", category);\n\n  const endpoint = BASE_URL + `/conversation/create/`;\n  console.log(\"addConversation\");\n\n  var res = axios({\n    method: \"post\",\n    url: endpoint,\n    data: data,\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  }).then((res) => {\n    console.log(res.data._id);\n    sessionStorage.setItem(\"conversationId\", res.data._id);\n  });\n  console.log(res);\n  return res;\n}\n\n//records participants who enter a chat\n\nexport async function addParticipantsInConversation(data) {\n  const { conversationId, participantsId } = data;\n  if (!conversationId || !participantsId) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  const formData = new FormData();\n  formData.append(\"conversationId\", conversationId);\n  formData.append(\"participantsId\", participantsId);\n\n  console.log(formData);\n\n  const endpoint = BASE_URL + `/conversation/addParticipants/`;\n\n  var res = axios({\n    method: \"put\",\n    url: endpoint,\n    data: formData,\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  }).then((res) => {\n    console.log(res.data);\n  });\n  console.log(res);\n  return res;\n}\n\n//records participants who leave a chat\nexport async function removeParticipantsInConversation(data) {\n  const { conversationId, participantsId } = data;\n  if (!conversationId || !participantsId) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  alert(\"You have now left this conversation!\");\n  const formData = new FormData();\n  formData.append(\"conversationId\", conversationId);\n  formData.append(\"participantsId\", participantsId);\n\n  console.log(formData);\n\n  const endpoint = BASE_URL + `/conversation/removeParticipants/`;\n\n  var res = axios({\n    method: \"put\",\n    url: endpoint,\n    data: formData,\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  }).then((res) => {\n    console.log(res.data);\n  });\n  console.log(res);\n  return res;\n}\n\n/*----------------\n Account API\n----------------*/\n\n/* reads a user account from the database based on id\n */\n\nexport async function readOneAccount(data) {\n  const accountId = data.accountId;\n\n  const endpoint = BASE_URL + \"/account/readOne\";\n\n  var res = await axios({\n    method: \"post\",\n    url: endpoint,\n    data: {\n      accountId,\n    },\n  });\n  return res.data;\n}\n\n/* wrapper for reading participants*/\nexport function useReadParticipants(data) {\n  const [loading, setLoading] = useState(true);\n  const [accounts, setAccounts] = useState([]);\n  const [error, setError] = useState(null);\n  console.log(\"ACALLED\");\n  useEffect(() => {\n    readOneAccount(data)\n      .then((accounts) => {\n        setAccounts(accounts);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    accounts,\n    error,\n  };\n}\n/* wrapper for reading one account*/\nexport function useOneAccount(data) {\n  const [loading, setLoading] = useState(true);\n  const [accounts, setAccounts] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    readOneAccount(data)\n      .then((accounts) => {\n        setAccounts(accounts);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    accounts,\n    error,\n  };\n}\n\n/* function adds an account to the database with the specified key value pairs \n    inputted by the user \n*/\n\nexport function addAccount(account) {\n  const { firstName, lastName, email, birthday, password, userImage } = account;\n\n  //alerts the user if one of the input fields is blank\n  if (!firstName || !lastName || !email || !birthday || !password) {\n    alert(\"must include all fields\");\n    return null;\n  }\n\n  //accesses the create function from backend\n  const endpoint = BASE_URL + `/account/create/`;\n\n  const data = new FormData();\n  data.append(\"firstName\", firstName);\n  data.append(\"lastName\", lastName);\n  data.append(\"email\", email);\n  data.append(\"birthday\", birthday);\n  data.append(\"password\", password);\n  data.append(\"userImage\", userImage);\n\n  if (userImage == undefined) {\n    alert(\"no image detected, default image used in place\");\n  }\n\n  //returns the status of the login (accountId, false)\n  return fetch(endpoint, {\n    method: \"POST\",\n    body: data,\n  }).then((res) => {\n    window.location.reload();\n    alert(\"account succesfully created! You can now log in!\");\n  });\n}\n\n/* function compares if login credentials match those stored in the \n    database, if succesful, the accountId is returned\n*/\nexport async function accountLogin(login) {\n  const { email, password } = login;\n\n  //alerts the user if one of the input fields is blank\n  if (!email || !password) {\n    alert(\"must include all fields\");\n    return null;\n  }\n\n  console.log({\n    email,\n    password,\n  });\n\n  //accesses the login function from backend\n  const endpoint = BASE_URL + `/account/login/`;\n  console.log(\"login\");\n\n  //returns the status of the login (true, false)\n  return new Promise(function (resolve) {\n    axios({\n      method: \"post\",\n      url: endpoint,\n      data: {\n        email,\n        password,\n      },\n    }).then(function (json) {\n      resolve(json);\n    });\n  });\n}\n\n/*----------------\n Message API\n----------------*/\n\n/* add message to the database\n */\nexport function addMessage(message) {\n  const { conversationId, senderId, text, image, video } = message;\n  if (!conversationId || !senderId || !text) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  console.log(\"made it\");\n\n  const endpoint = BASE_URL + `/message/create/`;\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      conversationId,\n      senderId,\n      text,\n      image,\n      video,\n    }),\n  }).then((res) => window.location.reload());\n}\n\n/* gets messages based on conversation id\n */\nfunction getSpecific(data) {\n  const endpoint = BASE_URL + \"/message/readSpecific\";\n  const conversationId = data.conversationId;\n  if (!conversationId) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  var res = fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      conversationId,\n    }),\n  }).then((res) => res.json());\n\n  return res;\n}\n\n/* gets all messages from database\n */\nfunction getMessages() {\n  const endpoint = BASE_URL + \"/message/readAll\";\n  console.log(\"getMessages\");\n  return fetch(endpoint).then((res) => res.json());\n}\n\n/* wrapper for get messages\n */\nexport function useMessages(data) {\n  const [loading, setLoading] = useState(true);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getSpecific(data)\n      .then((messages) => {\n        setMessages(messages);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    messages,\n    error,\n  };\n}\n\n/*----------------\n Report API\n----------------*/\n\n/* add report to the database\n */\nexport function addReport(report) {\n  const { accountId, messageId, reason } = report;\n  if (!accountId || !messageId || !reason) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  const data = new FormData();\n  data.append(\"accountId\", accountId);\n  data.append(\"messageId\", messageId);\n  data.append(\"reason\", reason);\n\n  const endpoint = BASE_URL + `/report/create/`;\n  var res = axios({\n    method: \"post\",\n    url: endpoint,\n    data: data,\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  }).then((res) => {\n    alert(\"report succesfully submitted!\");\n    console.log(res.data._id);\n  });\n  console.log(res);\n  return res;\n}\n\n//allows the admin to log in and view reports\nexport function reportLogin(reportLogin) {\n  const { password } = reportLogin;\n  if (!password) {\n    alert(\"must include field\");\n    return null;\n  }\n\n  var storedPassword = \"info30005\";\n\n  if (password === storedPassword) {\n    console.log(process.env.ADMIN);\n    return \"True\";\n  } else {\n    return \"False\";\n  }\n}\n\n/* gets all messages from reports\n */\nfunction getReports() {\n  const endpoint = BASE_URL + \"/report/readAll\";\n  return fetch(endpoint).then((res) => res.json());\n}\n\n/* wrapper for get reports\n */\nexport function useReports() {\n  const [loading, setLoading] = useState(true);\n  const [reports, setReports] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getReports()\n      .then((reports) => {\n        setReports(reports);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    reports,\n    error,\n  };\n}\n\n/*----------------\n Support API\n----------------*/\n\n/* add report to the database\n */\n\nfunction getSupports() {\n  const endpoint = BASE_URL + \"/support/readAll\";\n  console.log(getSupports);\n  return fetch(endpoint).then((res) => res.json());\n}\n\n/* wrapper for get supports\n */\nexport function useSupports() {\n  const [loading, setLoading] = useState(true);\n  const [supports, setSupports] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getSupports()\n      .then((conversations) => {\n        setSupports(conversations);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(e);\n        setLoading(false);\n      });\n  }, []);\n\n  return {\n    loading,\n    supports,\n    error,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}