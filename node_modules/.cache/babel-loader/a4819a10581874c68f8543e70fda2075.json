{"ast":null,"code":"/*TODO\n*  1. Login feature\n*  2. */\nimport { useState, useEffect } from \"react\"; // const BASE_URL = \"https://info30005-pear.herokuapp.com\";\n//Temporary base url before update heroku server\n\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n\nfunction getConversations() {\n  const endpoint = BASE_URL + '/conversation/readAll';\n  console.log(\"getConversations\");\n  return fetch(endpoint).then(res => res.json());\n} // export function getConversation(id) {\n//     const endpoint = BASE_URL + `/conversation/readOne/${id}`;\n//     console.log(\"getConversation\");\n//     return fetch(endpoint).then(res => {\n//         console.log(res);\n//     });\n// }\n\n\nexport function useConversations() {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getConversations().then(conversations => {\n      setConversations(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    conversations,\n    error\n  };\n}\nexport function addConversation(conversation) {\n  const {\n    topic,\n    category,\n    image\n  } = conversation;\n\n  if (!topic || !category) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  console.log({\n    topic,\n    category\n  });\n  const endpoint = BASE_URL + `/conversation/create/`;\n  console.log(\"addConversation\"); // console.log(author);\n\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      topic,\n      category,\n      image\n    })\n  }).then(res => window.location.reload());\n}\nexport function addAccount(account) {\n  const {\n    firstName,\n    lastName,\n    email,\n    birthday,\n    password\n  } = account;\n\n  if (!firstName || !lastName || !email || !birthday || !password) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  console.log({\n    firstName,\n    lastName\n  });\n  const endpoint = BASE_URL + `/account/create/`;\n  console.log(\"addAccount\");\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      firstName,\n      lastName,\n      email,\n      birthday,\n      password\n    })\n  }).then(res => window.location.reload());\n}\nexport function accountLogin(login) {\n  const {\n    email,\n    password\n  } = login;\n\n  if (!email || !password) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  console.log({\n    email,\n    password\n  });\n  const endpoint = BASE_URL + `/account/login/`;\n  console.log(\"login\");\n  return fetch(endpoint, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => window.location.reload());\n}","map":{"version":3,"sources":["/Users/glenn/Desktop/2020/info30005/info30005-pear-frontend/src/api.js"],"names":["useState","useEffect","BASE_URL","getConversations","endpoint","console","log","fetch","then","res","json","useConversations","loading","setLoading","conversations","setConversations","error","setError","catch","e","addConversation","conversation","topic","category","image","alert","method","headers","body","JSON","stringify","window","location","reload","addAccount","account","firstName","lastName","email","birthday","password","accountLogin","login"],"mappings":"AAAA;;;AAIA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;AAEA;;AACA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,gBAAT,GAA4B;AACxB,QAAMC,QAAQ,GAAGF,QAAQ,GAAG,uBAA5B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,SAAOC,KAAK,CAACH,QAAD,CAAL,CAAgBI,IAAhB,CAAqBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA5B,CAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,gBAAgB,GACXK,IADL,CACUM,aAAa,IAAI;AACnBC,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJL,EAKKK,KALL,CAKWC,CAAC,IAAI;AACRd,MAAAA,OAAO,CAACC,GAAR,CAAYa,CAAZ;AACAF,MAAAA,QAAQ,CAACE,CAAD,CAAR;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KATL;AAUH,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAO;AACHD,IAAAA,OADG;AAEHE,IAAAA,aAFG;AAGHE,IAAAA;AAHG,GAAP;AAKH;AAGD,OAAO,SAASI,eAAT,CAAyBC,YAAzB,EAAuC;AAC1C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAA6BH,YAAnC;;AACA,MAAI,CAACC,KAAD,IAAU,CAACC,QAAf,EAAyB;AACrBE,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACA;AACH;;AAEDpB,EAAAA,OAAO,CAACC,GAAR,CAAY;AACRgB,IAAAA,KADQ;AAERC,IAAAA;AAFQ,GAAZ;AAKA,QAAMnB,QAAQ,GAAGF,QAAQ,GAAI,uBAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAb0C,CAc1C;;AACA,SAAOC,KAAK,CAACH,QAAD,EAAW;AACnBsB,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFU;AAKnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBR,MAAAA,KADiB;AAEjBC,MAAAA,QAFiB;AAGjBC,MAAAA;AAHiB,KAAf;AALa,GAAX,CAAL,CAUJhB,IAVI,CAUCC,GAAG,IAAIsB,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAVR,CAAP;AAWH;AAED,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAChC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA;AAAxC,MAAqDL,OAA3D;;AACA,MAAI,CAACC,SAAD,IAAc,CAACC,QAAf,IAA2B,CAACC,KAA5B,IAAqC,CAACC,QAAtC,IAAkD,CAACC,QAAvD,EAAiE;AAC7Df,IAAAA,KAAK,CAAC,yBAAD,CAAL;AACA;AACH;;AAEDpB,EAAAA,OAAO,CAACC,GAAR,CAAY;AACR8B,IAAAA,SADQ;AAERC,IAAAA;AAFQ,GAAZ;AAKA,QAAMjC,QAAQ,GAAGF,QAAQ,GAAI,kBAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,SAAOC,KAAK,CAACH,QAAD,EAAW;AACnBsB,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFU;AAKnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBM,MAAAA,SADiB;AAEjBC,MAAAA,QAFiB;AAGjBC,MAAAA,KAHiB;AAIjBC,MAAAA,QAJiB;AAKjBC,MAAAA;AALiB,KAAf;AALa,GAAX,CAAL,CAYJhC,IAZI,CAYCC,GAAG,IAAIsB,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAZR,CAAP;AAaH;AAED,OAAO,SAASQ,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,QAAM;AAAEJ,IAAAA,KAAF;AAASE,IAAAA;AAAT,MAAsBE,KAA5B;;AACA,MAAI,CAACJ,KAAD,IAAU,CAACE,QAAf,EAAyB;AACrBf,IAAAA,KAAK,CAAC,yBAAD,CAAL;AACA;AACH;;AAEDpB,EAAAA,OAAO,CAACC,GAAR,CAAY;AACRgC,IAAAA,KADQ;AAERE,IAAAA;AAFQ,GAAZ;AAKA,QAAMpC,QAAQ,GAAGF,QAAQ,GAAI,iBAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,SAAOC,KAAK,CAACH,QAAD,EAAW;AACnBsB,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAFU,GAAX,CAAL,CAKJnB,IALI,CAKCC,GAAG,IAAIsB,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EALR,CAAP;AAMH","sourcesContent":["/*TODO\n*  1. Login feature\n*  2. */\n\nimport { useState, useEffect } from \"react\";\n\n// const BASE_URL = \"https://info30005-pear.herokuapp.com\";\n\n//Temporary base url before update heroku server\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n\nfunction getConversations() {\n    const endpoint = BASE_URL + '/conversation/readAll';\n    console.log(\"getConversations\");\n    return fetch(endpoint).then(res => res.json());\n}\n\n// export function getConversation(id) {\n//     const endpoint = BASE_URL + `/conversation/readOne/${id}`;\n//     console.log(\"getConversation\");\n//     return fetch(endpoint).then(res => {\n//         console.log(res);\n//     });\n// }\n\nexport function useConversations() {\n    const [loading, setLoading] = useState(true);\n    const [conversations, setConversations] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        getConversations()\n            .then(conversations => {\n                setConversations(conversations);\n                setLoading(false);\n            })\n            .catch(e => {\n                console.log(e);\n                setError(e);\n                setLoading(false);\n            });\n    }, []);\n\n    return {\n        loading,\n        conversations,\n        error\n    };\n}\n\n\nexport function addConversation(conversation) {\n    const { topic, category, image } = conversation;\n    if (!topic || !category) {\n        alert(\"must include all required fields\");\n        return;\n    }\n\n    console.log({\n        topic,\n        category\n    });\n\n    const endpoint = BASE_URL + `/conversation/create/`;\n    console.log(\"addConversation\");\n    // console.log(author);\n    return fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            topic,\n            category,\n            image\n        })\n    }).then(res => window.location.reload());\n}\n\nexport function addAccount(account) {\n    const { firstName, lastName, email, birthday, password } = account;\n    if (!firstName || !lastName || !email || !birthday || !password) {\n        alert(\"must include all fields\");\n        return;\n    }\n\n    console.log({\n        firstName,\n        lastName\n    });\n\n    const endpoint = BASE_URL + `/account/create/`;\n    console.log(\"addAccount\");\n    \n    return fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            firstName,\n            lastName,\n            email, \n            birthday, \n            password\n        })\n    }).then(res => window.location.reload());\n}\n\nexport function accountLogin(login) {\n    const { email, password } = login;\n    if (!email || !password) {\n        alert(\"must include all fields\");\n        return;\n    }\n\n    console.log({\n        email,\n        password\n    });\n\n    const endpoint = BASE_URL + `/account/login/`;\n    console.log(\"login\");\n\n    return fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n    }).then(res => window.location.reload());\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}